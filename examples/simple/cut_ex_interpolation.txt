val p = FOLAtom( "p", Nil )

val axp1 = Axiom( p :: Nil, p :: Nil)
val axp2 = Axiom( p :: Nil, p :: Nil)

val negp = Neg( p )
val nnegp = Neg( negp )
val nnegpImpP = Imp( nnegp, p )
val pOrNegp = Or( p, negp )

val p1 = NegRightRule( axp1, p )
val p2 = NegLeftRule( p1, negp )
val p3 = WeakeningRightRule( p2, p )
val p4 = ImpRightRule( p3, nnegp, p )

val p5 = WeakeningLeftRule( axp2, nnegp )
val p6 = ImpRightRule( p5, nnegp, p )

val p7 = CutRule( p4, p6, p )
val p8 = ContractionRightRule( p7, nnegpImpP )
val p9 = WeakeningLeftRule( p8, pOrNegp )

val npart = Set( p9.root.succedent( 0 ) )
val ppart = Set( p9.root.antecedent( 0 ) )

val I = extractInterpolant( p9, npart, ppart )
